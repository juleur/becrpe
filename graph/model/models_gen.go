// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"fmt"
	"io"
	"strconv"
	"time"

	"github.com/99designs/gqlgen/graphql"
)

type DocUploadFile struct {
	Title *string        `json:"title"`
	File  graphql.Upload `json:"file"`
}

type LoginInput struct {
	Email    string `json:"email"`
	Password string `json:"password"`
}

type NewSessionInput struct {
	RefresherCourseID int              `json:"refresherCourseId"`
	Title             string           `json:"title"`
	Section           SectionEnum      `json:"section"`
	Type              TypeEnum         `json:"type"`
	Description       *string          `json:"description"`
	SessionNumber     *int             `json:"sessionNumber"`
	RecordedOn        time.Time        `json:"recordedOn"`
	VideoFile         graphql.Upload   `json:"videoFile"`
	DocFiles          []*DocUploadFile `json:"docFiles"`
}

type NewUserInput struct {
	Username string  `json:"username"`
	Email    string  `json:"email"`
	Fullname *string `json:"fullname"`
	Password string  `json:"password"`
}

type PurchaseRefresherCourseInput struct {
	RefresherCourseID int    `json:"refresherCourseId"`
	PaypalOrderID     string `json:"paypalOrderId"`
	PaypalPayerID     string `json:"paypalPayerId"`
}

type RefresherCourse struct {
	ID            string       `json:"id" db:"id"`
	Subject       *SubjectEnum `json:"subject" db:"subject"`
	Year          *string      `json:"year" db:"year"`
	IsFinished    *bool        `json:"isFinished" db:"is_finished"`
	Price         *float64     `json:"price" db:"price"`
	CreatedAt     *time.Time   `json:"createdAt" db:"created_at"`
	UpdatedAt     *time.Time   `json:"updatedAt" db:"updated_at"`
	TotalDuration *string      `json:"totalDuration"`
	IsPurchased   *bool        `json:"isPurchased"`
	Teachers      []*User      `json:"teachers"`
}

type RefresherCourseInput struct {
	ByUserID  *int         `json:"byUserId"`
	BySubject *SubjectEnum `json:"bySubject"`
}

type RefresherCourseResponse struct {
	RefresherCourse *RefresherCourse `json:"refresherCourse"`
	Sessions        []*Session       `json:"sessions"`
}

type Session struct {
	ID            string       `json:"id" db:"id"`
	Title         *string      `json:"title" db:"title"`
	Section       *SectionEnum `json:"section" db:"section"`
	Type          *TypeEnum    `json:"type" db:"type"`
	Description   *string      `json:"description" db:"description"`
	SessionNumber *int         `json:"sessionNumber" db:"session_number"`
	RecordedOn    *time.Time   `json:"recordedOn" db:"recorded_on"`
	CreatedAt     *time.Time   `json:"createdAt" db:"created_at"`
	UpdatedAt     *time.Time   `json:"updatedAt" db:"updated_at"`
}

type SessionInput struct {
	UserID            int `json:"userId"`
	RefresherCourseID int `json:"refresherCourseId"`
	SessionID         int `json:"sessionId"`
}

type SessionResponse struct {
	Session     *Session      `json:"session"`
	Video       *Video        `json:"video"`
	ClassPapers []*ClassPaper `json:"classPapers"`
	Teacher     *User         `json:"teacher"`
}

type UpdateUserInput struct {
	Username *string `json:"username"`
	Email    *string `json:"email"`
	Fullname *string `json:"fullname"`
	Password string  `json:"password"`
}

type SectionEnum string

const (
	SectionEnumDialectical SectionEnum = "DIALECTICAL"
	SectionEnumScientific  SectionEnum = "SCIENTIFIC"
)

var AllSectionEnum = []SectionEnum{
	SectionEnumDialectical,
	SectionEnumScientific,
}

func (e SectionEnum) IsValid() bool {
	switch e {
	case SectionEnumDialectical, SectionEnumScientific:
		return true
	}
	return false
}

func (e SectionEnum) String() string {
	return string(e)
}

func (e *SectionEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SectionEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SectionEnum", str)
	}
	return nil
}

func (e SectionEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type SubjectEnum string

const (
	SubjectEnumEconomics     SubjectEnum = "ECONOMICS"
	SubjectEnumFrench        SubjectEnum = "FRENCH"
	SubjectEnumMathetimatics SubjectEnum = "MATHETIMATICS"
)

var AllSubjectEnum = []SubjectEnum{
	SubjectEnumEconomics,
	SubjectEnumFrench,
	SubjectEnumMathetimatics,
}

func (e SubjectEnum) IsValid() bool {
	switch e {
	case SubjectEnumEconomics, SubjectEnumFrench, SubjectEnumMathetimatics:
		return true
	}
	return false
}

func (e SubjectEnum) String() string {
	return string(e)
}

func (e *SubjectEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = SubjectEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid SubjectEnum", str)
	}
	return nil
}

func (e SubjectEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}

type TypeEnum string

const (
	TypeEnumExercise TypeEnum = "EXERCISE"
	TypeEnumLesson   TypeEnum = "LESSON"
)

var AllTypeEnum = []TypeEnum{
	TypeEnumExercise,
	TypeEnumLesson,
}

func (e TypeEnum) IsValid() bool {
	switch e {
	case TypeEnumExercise, TypeEnumLesson:
		return true
	}
	return false
}

func (e TypeEnum) String() string {
	return string(e)
}

func (e *TypeEnum) UnmarshalGQL(v interface{}) error {
	str, ok := v.(string)
	if !ok {
		return fmt.Errorf("enums must be strings")
	}

	*e = TypeEnum(str)
	if !e.IsValid() {
		return fmt.Errorf("%s is not a valid TypeEnum", str)
	}
	return nil
}

func (e TypeEnum) MarshalGQL(w io.Writer) {
	fmt.Fprint(w, strconv.Quote(e.String()))
}
